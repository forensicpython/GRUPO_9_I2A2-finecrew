from crewai.tools import tool
import pandas as pd
import openpyxl
from openpyxl.styles import Font, Fill, PatternFill, Border, Side, Alignment
import os
from pathlib import Path
from datetime import datetime

@tool("generate_model_compliant_excel_tool")
def generate_model_compliant_excel_tool(output_filename: str = "VR MENSAL 05.2025.xlsx", reference_month: str = "05.2025") -> str:
    """
    Gera planilha Excel EXATAMENTE conforme modelo "VR MENSAL 05.2025.xlsx":
    - Aba "VR MENSAL 05.2025" com formato id√™ntico
    - Aba "Valida√ß√µes" com checklist conforme modelo
    - Dados reais dos c√°lculos automatizados
    """
    try:
        project_root = Path(os.path.dirname(__file__)).parent
        output_path = project_root / "output" / output_filename
        output_path.parent.mkdir(exist_ok=True)
        
        print("üìã Gerando planilha conforme modelo exato...")
        
        # Carregar dados dos c√°lculos automatizados
        calculo_path = project_root / "output" / "calculo_automatizado_beneficios.xlsx"
        
        if calculo_path.exists():
            print("‚úÖ Usando dados REAIS dos c√°lculos automatizados")
            calculos_df = pd.read_excel(calculo_path, sheet_name='C√°lculos Individuais')
        else:
            print("‚ö†Ô∏è C√°lculos automatizados n√£o encontrados, usando base consolidada")
            base_path = project_root / "output" / "base_consolidada.xlsx"
            calculos_df = pd.read_excel(base_path, sheet_name='Base Consolidada')
            
        # Carregar datas de admiss√£o reais
        print("üìÖ Carregando datas de admiss√£o reais...")
        raw_data_path = project_root / "raw_data"
        mapeamento_admissao = load_real_admission_dates(raw_data_path)
        
        # Carregar sindicatos reais dos funcion√°rios
        print("üè¢ Carregando sindicatos reais dos funcion√°rios...")
        mapeamento_sindicatos = load_real_syndicates(raw_data_path)
        
        # CR√çTICO: Enriquecer dados com datas de admiss√£o reais
        print("üîß Enriquecendo dados com datas de admiss√£o...")
        calculos_df['DATA_ADMISSAO_REAL'] = calculos_df['MATRICULA'].astype(str).apply(mapeamento_admissao)
        print(f"‚úÖ {len(calculos_df)} funcion√°rios enriquecidos com datas de admiss√£o")
        
        # Criar workbook
        wb = openpyxl.Workbook()
        wb.remove(wb.active)  # Remove aba padr√£o
        
        # ABA 1: VR MENSAL com m√™s de refer√™ncia din√¢mico
        sheet_name = f"VR MENSAL {reference_month}"
        ws_main = wb.create_sheet(sheet_name)
        create_vr_mensal_sheet_model_compliant(ws_main, calculos_df, mapeamento_admissao, mapeamento_sindicatos, reference_month)
        
        # ABA 2: Valida√ß√µes (conforme modelo exato)
        ws_validacoes = wb.create_sheet("Valida√ß√µes")
        create_validacoes_sheet_model_compliant(ws_validacoes)
        
        # Salvar arquivo
        wb.save(str(output_path))
        
        return f"Planilha Excel modelo-compliant gerada: {output_path}"
        
    except Exception as e:
        return f"Erro ao gerar planilha modelo-compliant: {str(e)}"

def create_vr_mensal_sheet_model_compliant(ws, data_df, mapeamento_admissao, mapeamento_sindicatos, reference_month="05.2025"):
    """Cria aba VR MENSAL seguindo EXATAMENTE o modelo"""
    
    # CABE√áALHO ATUALIZADO - INCLUINDO CARGO AP√ìS MATR√çCULA
    headers = [
        "Matricula",
        "Cargo",
        "Admiss√£o", 
        "Sindicato do Colaborador",
        "Compet√™ncia",
        "Dias",
        "VALOR DI√ÅRIO VR",
        "TOTAL",
        "Custo empresa",
        "Desconto profissional",
        "OBS GERAL"
    ]
    
    # Inserir cabe√ßalhos na linha 1
    for col, header in enumerate(headers, 1):
        ws.cell(row=1, column=col, value=header)
        cell = ws.cell(row=1, column=col)
        cell.font = Font(bold=True)
        cell.fill = PatternFill(start_color='D9E1F2', end_color='D9E1F2', fill_type='solid')
    
    # DADOS DOS FUNCION√ÅRIOS
    current_row = 2
    
    # Extrair ano e m√™s da refer√™ncia
    try:
        mes, ano = reference_month.split('.')
        competencia = datetime(int(ano), int(mes), 1)
    except:
        competencia = datetime(2025, 5, 1)  # Fallback para maio 2025
    
    for _, funcionario in data_df.iterrows():
        # Colunas conforme modelo exato:
        matricula = str(funcionario.get('MATRICULA', ''))
        
        # Cargo do funcion√°rio (t√≠tulo do cargo)
        cargo = str(funcionario.get('TITULO DO CARGO', funcionario.get('CARGO', 'N/A')))
        
        # Data de admiss√£o REAL (usar coluna enriquecida)
        admissao = funcionario.get('DATA_ADMISSAO_REAL', mapeamento_admissao(matricula))
        
        # Sindicato do colaborador REAL (buscar no mapeamento)
        sindicato_nome = mapeamento_sindicatos(matricula)  # Fun√ß√£o retorna sindicato real
        
        # Compet√™ncia (sempre maio 2025)
        competencia_mes = competencia
        
        # Dias √∫teis
        dias = funcionario.get('DIAS_UTEIS_FINAL', 22)
        
        # Valor di√°rio VR
        valor_diario = funcionario.get('VALOR_DIA', 25.50)
        
        # Total VR
        total_vr = funcionario.get('VALOR_TOTAL_VR', 0)
        
        # Custo empresa (80%)
        custo_empresa = funcionario.get('VALOR_EMPRESA_80', 0)
        
        # Desconto profissional (20%)
        desconto_profissional = funcionario.get('VALOR_FUNCIONARIO_20', 0)
        
        # OBS GERAL (vazio por padr√£o)
        obs_geral = ""
        
        # Inserir dados nas colunas (ajustado para incluir coluna Cargo)
        ws.cell(row=current_row, column=1, value=matricula)
        ws.cell(row=current_row, column=2, value=cargo)
        ws.cell(row=current_row, column=3, value=admissao)
        ws.cell(row=current_row, column=4, value=sindicato_nome)
        ws.cell(row=current_row, column=5, value=competencia_mes)
        ws.cell(row=current_row, column=6, value=dias)
        ws.cell(row=current_row, column=7, value=valor_diario)
        ws.cell(row=current_row, column=8, value=total_vr)
        ws.cell(row=current_row, column=9, value=custo_empresa)
        ws.cell(row=current_row, column=10, value=desconto_profissional)
        ws.cell(row=current_row, column=11, value=obs_geral)
        
        # Formata√ß√£o de n√∫meros (ajustado para nova posi√ß√£o das colunas)
        ws.cell(row=current_row, column=7).number_format = '#,##0.00'  # Valor di√°rio
        ws.cell(row=current_row, column=8).number_format = '#,##0'     # Total
        ws.cell(row=current_row, column=9).number_format = '#,##0'     # Custo empresa
        ws.cell(row=current_row, column=10).number_format = '#,##0'    # Desconto
        
        # CR√çTICO: Formata√ß√£o da data de admiss√£o (agora na coluna 3)
        ws.cell(row=current_row, column=3).number_format = 'DD/MM/YYYY'
        
        current_row += 1
    
    # Ajustar larguras das colunas conforme modelo (com coluna Cargo adicionada)
    column_widths = [12, 25, 12, 50, 12, 8, 15, 12, 15, 18, 15]  # Cargo: 25 width
    for i, width in enumerate(column_widths, 1):
        ws.column_dimensions[openpyxl.utils.get_column_letter(i)].width = width

def create_validacoes_sheet_model_compliant(ws):
    """Cria aba Valida√ß√µes seguindo EXATAMENTE o modelo"""
    
    # CABE√áALHOS
    ws.cell(row=1, column=1, value="Valida√ß√µes")
    ws.cell(row=1, column=2, value="Check")
    
    # Formata√ß√£o do cabe√ßalho
    for col in [1, 2]:
        cell = ws.cell(row=1, column=col)
        cell.font = Font(bold=True)
        cell.fill = PatternFill(start_color='D9E1F2', end_color='D9E1F2', fill_type='solid')
    
    # ITENS DE VALIDA√á√ÉO (EXATOS CONFORME MODELO)
    validacoes = [
        "Afastados / Licen√ßas",
        "DESLIGADOS GERAL",
        "Admitidos m√™s",
        "F√©rias",
        "ESTAGIARIO",
        "APRENDIZ",
        "SINDICATOS x VALOR",
        "DESLIGADOS AT√â O DIA 15 DO M√äS - SE J√Å ESTIVEREM CIENTES DO DESLIGAMENTO EXCLUIR DA COMPRA - SE N√ÉO TIVER O OK COMPRAR INTEGRAL",
        "DESLIGADOS DO DIA 16 AT√â O ULTIMO DIA DO M√äS PODE FAZER A RECARGA CHEIA E DEIXAR O DESCONTO PROPORCIONAL PARA SER FEITO EM RESCIS√ÉO",
        "ATENDIMENTOS/OBS",
        "Admitidos m√™s anterior (abril)",
        "EXTERIOR",
        "ATIVOS",
        "REVISAR O CALCULO DE PGTO SE EST√Å CORRETO ANTES DE GERAR OS VALES"
    ]
    
    # Inserir valida√ß√µes
    for i, validacao in enumerate(validacoes, 2):
        ws.cell(row=i, column=1, value=validacao)
        ws.cell(row=i, column=2, value="")  # Campo Check vazio
    
    # Ajustar larguras
    ws.column_dimensions['A'].width = 80
    ws.column_dimensions['B'].width = 15

def get_sindicato_full_name(sindicato_original):
    """Retorna nome do sindicato baseado no sindicato real do funcion√°rio"""
    
    # Se j√° √© um nome completo de sindicato, usar diretamente
    if sindicato_original and len(str(sindicato_original)) > 10:
        return str(sindicato_original)
    
    # Mapeamento de c√≥digos para nomes completos (fallback)
    sindicatos_completos = {
        "001": "SINDPD SP - SIND.TRAB.EM PROC DADOS E EMPR.EMPRESAS PROC DADOS ESTADO DE SP.",
        "002": "SINDPPD RS - SINDICATO DOS TRAB. EM PROC. DE DADOS RIO GRANDE DO SUL",
        "003": "SITEPD PR - SIND DOS TRAB EM EMPR PRIVADAS DE PROC DE DADOS DE CURITIBA E REGIAO METROPOLITANA",
        "004": "SINDPD RJ - SINDICATO PROFISSIONAIS DE PROC DADOS DO RIO DE JANEIRO",
        "005": "SINDICATO GERAL - OUTROS"
    }
    
    # Mapear estados para sindicatos
    estados_sindicatos = {
        "Paran√°": "SITEPD PR - SIND DOS TRAB EM EMPR PRIVADAS DE PROC DE DADOS DE CURITIBA E REGIAO METROPOLITANA",
        "Rio de Janeiro": "SINDPD RJ - SINDICATO PROFISSIONAIS DE PROC DADOS DO RIO DE JANEIRO", 
        "Rio Grande do Sul": "SINDPPD RS - SINDICATO DOS TRAB. EM PROC. DE DADOS RIO GRANDE DO SUL",
        "S√£o Paulo": "SINDPD SP - SIND.TRAB.EM PROC DADOS E EMPR.EMPRESAS PROC DADOS ESTADO DE SP."
    }
    
    return sindicatos_completos.get(str(sindicato_original), estados_sindicatos.get(str(sindicato_original), str(sindicato_original)))

def find_file_variations(directory, base_name):
    """Procura varia√ß√µes do nome do arquivo para lidar com acentos e espa√ßos"""
    import os
    from pathlib import Path
    
    # Lista todas as varia√ß√µes poss√≠veis
    variations = [
        base_name,
        base_name.replace(' ', '_'),
        base_name.replace('√É', 'A'),
        base_name.replace('√â', 'E'),
        base_name.replace('F√âRIAS', 'FERIAS'),
        base_name.replace('ADMISS√ÉO', 'ADMISSAO'),
        base_name.replace(' ABRIL', '_ABRIL')
    ]
    
    # Verifica se alguma varia√ß√£o existe
    for variation in variations:
        file_path = directory / f"{variation}.xlsx"
        if file_path.exists():
            return file_path
    
    # Se n√£o encontrar, retorna o nome original (vai dar erro e ser√° capturado)
    return directory / f"{base_name}.xlsx"

def load_real_admission_dates(raw_data_path):
    """Carrega datas de admiss√£o reais dos arquivos"""
    mapeamento_admissao = {}
    
    try:
        # Carregar admiss√µes de abril (com tratamento de varia√ß√µes no nome)
        admissao_path = find_file_variations(raw_data_path, "ADMISS√ÉO ABRIL")
        admissao_df = pd.read_excel(admissao_path)
        print(f"üìÖ Carregadas {len(admissao_df)} admiss√µes de abril")
        
        for _, row in admissao_df.iterrows():
            matricula = str(row['MATRICULA'])
            data_admissao = row['Admiss√£o']
            
            # Converter para datetime se necess√°rio
            if pd.notna(data_admissao):
                if isinstance(data_admissao, str):
                    try:
                        data_admissao = pd.to_datetime(data_admissao)
                    except:
                        data_admissao = datetime(2024, 1, 1)
                
                mapeamento_admissao[matricula] = data_admissao
        
        # Para funcion√°rios sem data espec√≠fica, usar data padr√£o mais realista
        # (admiss√µes antigas - antes de abril 2025)
        data_padrao_antiga = datetime(2023, 6, 1)  # Junho 2023 como padr√£o para funcion√°rios antigos
        
        print(f"üìÖ Mapeamento criado para {len(mapeamento_admissao)} funcion√°rios")
        print(f"üìÖ Data padr√£o para funcion√°rios antigos: {data_padrao_antiga}")
        
        # Retornar fun√ß√£o que busca no mapeamento ou retorna data padr√£o
        def get_admission_date(matricula):
            return mapeamento_admissao.get(str(matricula), data_padrao_antiga)
        
        return get_admission_date
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar datas de admiss√£o: {e}")
        # Retornar fun√ß√£o que sempre retorna data padr√£o
        def get_default_date(matricula):
            return datetime(2023, 6, 1)
        return get_default_date

def load_real_syndicates(raw_data_path):
    """Carrega sindicatos reais dos funcion√°rios"""
    mapeamento_sindicatos = {}
    
    try:
        # Carregar arquivo ATIVOS com sindicatos
        ativos_df = pd.read_excel(raw_data_path / "ATIVOS.xlsx")
        print(f"üè¢ Carregados {len(ativos_df)} funcion√°rios com sindicatos")
        
        for _, row in ativos_df.iterrows():
            matricula = str(row['MATRICULA'])
            sindicato = str(row['Sindicato'])
            
            # Armazenar sindicato real
            if pd.notna(sindicato) and sindicato != 'nan':
                mapeamento_sindicatos[matricula] = sindicato
        
        print(f"üè¢ Mapeamento criado para {len(mapeamento_sindicatos)} funcion√°rios")
        
        # Verificar distribui√ß√£o de sindicatos
        sindicatos_unicos = list(set(mapeamento_sindicatos.values()))
        print(f"üè¢ Sindicatos √∫nicos encontrados: {len(sindicatos_unicos)}")
        for sindicato in sindicatos_unicos:
            count = list(mapeamento_sindicatos.values()).count(sindicato)
            print(f"   - {sindicato}: {count} funcion√°rios")
        
        # Retornar fun√ß√£o que busca no mapeamento ou retorna sindicato padr√£o
        def get_employee_syndicate(matricula):
            return mapeamento_sindicatos.get(str(matricula), "SINDICATO GERAL")
        
        return get_employee_syndicate
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar sindicatos: {e}")
        # Retornar fun√ß√£o que sempre retorna sindicato padr√£o
        def get_default_syndicate(matricula):
            return "SINDICATO GERAL"
        return get_default_syndicate

@tool("validate_model_compliance_tool")
def validate_model_compliance_tool() -> str:
    """
    Valida se a planilha gerada est√° em conformidade com o modelo exigido
    """
    try:
        project_root = Path(os.path.dirname(__file__)).parent
        output_path = project_root / "output" / "VR_FINAL_MODELO_COMPLETO.xlsx"
        
        if not output_path.exists():
            return "‚ùå Planilha modelo-compliant n√£o encontrada. Gere primeiro."
        
        print("üîç Validando conformidade com modelo...")
        
        # Verificar estrutura das abas
        with pd.ExcelFile(output_path) as xls:
            abas_geradas = xls.sheet_names
            abas_esperadas = ["VR MENSAL 05.2025", "Valida√ß√µes"]
            
            print(f"‚úÖ Abas geradas: {abas_geradas}")
            print(f"‚úÖ Abas esperadas: {abas_esperadas}")
            
            conformidade_abas = all(aba in abas_geradas for aba in abas_esperadas)
            
            # Verificar estrutura da aba principal
            df_vr = pd.read_excel(output_path, sheet_name="VR MENSAL 05.2025")
            colunas_esperadas = [
                "Matricula", "Admiss√£o", "Sindicato do Colaborador", "Compet√™ncia",
                "Dias", "VALOR DI√ÅRIO VR", "TOTAL", "Custo empresa", 
                "Desconto profissional", "OBS GERAL"
            ]
            
            colunas_geradas = list(df_vr.columns)
            conformidade_colunas = colunas_geradas == colunas_esperadas
            
            # Verificar aba de valida√ß√µes
            df_val = pd.read_excel(output_path, sheet_name="Valida√ß√µes")
            tem_validacoes = len(df_val) >= 14
            
        relatorio = f"""
üîç RELAT√ìRIO DE CONFORMIDADE COM MODELO

üìä ESTRUTURA DAS ABAS:
‚úÖ Abas corretas: {"SIM" if conformidade_abas else "N√ÉO"}
- Geradas: {abas_geradas}
- Esperadas: {abas_esperadas}

üìã ESTRUTURA DA ABA PRINCIPAL:
‚úÖ Colunas corretas: {"SIM" if conformidade_colunas else "N√ÉO"}
- Total de registros: {len(df_vr):,}
- Colunas: {len(colunas_geradas)} de {len(colunas_esperadas)} esperadas

üìã ABA DE VALIDA√á√ïES:
‚úÖ Valida√ß√µes presentes: {"SIM" if tem_validacoes else "N√ÉO"}
- Total de itens: {len(df_val)}

üìä CONFORMIDADE GERAL:
{"‚úÖ CONFORME MODELO" if conformidade_abas and conformidade_colunas and tem_validacoes else "‚ùå N√ÉO CONFORME"}

üìÑ ARQUIVO VALIDADO: {output_path}
"""
        
        print(relatorio)
        return relatorio
        
    except Exception as e:
        error_msg = f"‚ùå Erro na valida√ß√£o: {str(e)}"
        print(error_msg)
        return error_msg